---
// imports
import Card from '../components/Card.astro'
import SearchIcon from '../components/SearchIcon.astro'
import BaseLayout from '../layout/BaseLayout.astro'
import type { countryType } from '../types/country'


// data fetching
const country = Astro.url.searchParams.get('country')
const res = country 
	? await fetch(`https://restcountries.com/v3.1/region/${country.toLowerCase()}`)
	: await fetch("https://restcountries.com/v3.1/all")
const data = await res.json()

const regions = ['Africa', 'America', 'Asia', 'Europe', 'Oceania']
---

<BaseLayout>	
	<div class="flex justify-between px-4 py-8">
		<div class="relative">
			<input
				type="search"
				id="search"
				placeholder="Enter search term..."
				class="py-2 px-4 rounded-md shadow-sm placeholder:italic bg-theme-elements pl-9"
			/>
			<SearchIcon customClass="absolute top-2.5 left-2 w-5 h-5 text-theme-input" />
		</div>
		<label class="pr-4 rounded-md shadow-sm bg-theme-elements overflow-hidden">
			<select name="regions" id="regions" class="py-2 px-4 bg-theme-elements">
				<option value="" disabled selected>Filter by Region</option>
				<option value="">All Regions</option>
				{regions.map((r) => <option value={r}>{r}</option>)}
			</select>
		</label>
	</div>
	<section aria-label="countries" class="mx-4 xl:mx:0">
		<div class="grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
			{data.map((d: countryType) => (
				<Card
					name={d.name.common}
					image={d.flags.png}
					pop={d.population}
					region={d.region}
					capital={d.capital}
					link={`/country/${d.ccn3}`}
					cioc={d.cioc}
				/>
			))}
		</div>
	</section>
</BaseLayout>

<script>
	// inputs
	const searchInput = document.querySelector("#search") as HTMLInputElement
	const regionInput = document.querySelector("#regions") as HTMLSelectElement

	// cards
	const countries = Array.from(document.querySelectorAll("[data-country]"))

	// event listeners

	// search
	searchInput?.addEventListener('input', (e) => {
		const value = e.target?.value.toLowerCase()
		countries.forEach((c) => {
			if (!c.dataset.country.toLowerCase().includes(value)) {
				c.classList.add("hidden")
			} else {
				c.classList.remove("hidden")
			}			
		})
	})

	// filter
	regionInput?.addEventListener('change', (e) => {
		if (e.target.value === "") {
			return window.location.assign(window.location.origin)
		}
		const url = new URL(window.location.origin)
		url.searchParams.set("country", e.target.value)

		window.location.assign(url)
	})

	// window on load
	function setDropdownInput() {
		const url = new URL(window.location)
		const { country } = Object.fromEntries(url.searchParams)
		if (country) {
			regionInput.value = country	
		}	
	}

	window.addEventListener('DOMContentLoaded', setDropdownInput)
	document.addEventListener('astro:after-swap', setDropdownInput)
</script>
